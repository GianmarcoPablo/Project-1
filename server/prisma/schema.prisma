// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  normal
  admin
}

model User {
  id                      String         @id @default(uuid())
  firstname               String
  lastname                String
  email                   String         @unique
  password                String
  verificationCode        String?
  verificationCodeExpires DateTime?
  emailVerified           Boolean        @default(false)
  isPremiun               Boolean        @default(false)
  customerId              String?        @unique
  roles                   Role[]         @default([normal])
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  session                 Session[]
  subscription            Subscription[]
  invoice                 Invoice[]
  profile                 Profile?
  company                 Company[]
  curriculum              Curriculum?
  imageUser               ImageUser?
}

model ImageUser {
  id        String   @id() @default(uuid())
  publicId  String?  @unique
  url       String?
  format    String?
  width     Float?
  height    Float?
  bytes     Float?
  isAvatar  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_user")
}

model Company {
  id                   String         @id() @default(uuid())
  name                 String
  type                 CompanyType
  size                 Int
  slug                 String         @unique
  about                String
  whatDoesTheCompanyDo String[]
  companyVision        String[]
  links                String[]
  phone                String?
  yearOfFounding       Int?
  website              String?
  country              String?
  city                 String?
  address              String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  user                 User           @relation(fields: [userId], references: [id])
  userId               String
  Sector               Sector         @relation(fields: [sectorId], references: [id])
  sectorId             String
  imageCompany         ImageCompany[]
}

model Sector {
  id        String    @id() @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company[]
}

model ImageCompany {
  id        String   @id() @default(uuid())
  publicId  String?  @unique
  url       String?
  format    String?
  width     Float?
  height    Float?
  bytes     Float?
  isLogo    Boolean  @default(false)
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_company")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                 String    @id @default(uuid())
  subscriptionId     String    @unique
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  status             String
  planId             String
  canceled_at        DateTime?
  price              Int       @default(0)
  currentPeriodStart DateTime  @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isMonthly          Boolean   @default(false)
  isYearly           Boolean   @default(false)
}

model Invoice {
  id              String   @id @default(cuid())
  stripeInvoiceId String   @unique
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  amountDue       Int
  amountPaid      Int
  status          String
  invoiceUrl      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Profile {
  id         String   @id() @default(uuid())
  bio        String?
  phone      String?
  country    String?
  yearsOfExp Int?
  education  Study?
  openSearch Boolean?

  skills    String[]
  languages String[]
  links     String[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curriculum {
  id        String   @id @default(uuid())
  url       String
  publicId  String
  format    String
  bytes     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Study {
  primarybasiceducation
  secondarybasiceducation
  middleeducation
  technicalcareer
  career
  specialization
  mastersdegree
  doctorate
}

enum CompanyType {
  Corporation // Sociedad Anónima
  LLC // Sociedad de Responsabilidad Limitada (SRL)
  SoleProprietorship // Empresa Individual
  Cooperative // Cooperativa
  Partnership // Sociedad Colectiva
  NonProfit // Asociación sin Fines de Lucro
  PublicCompany // Empresa Pública
  Startup // Startup
  Other // Otras
}
